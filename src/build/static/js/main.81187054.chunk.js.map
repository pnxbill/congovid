{"version":3,"sources":["apollo/index.ts","apollo/queries/InformeQueries.ts","components/chart/Chart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","ApolloClient","uri","cache","InMemoryCache","GET_INFORMES","gql","Container","styled","div","Chart","data","slice","reverse","colorScale","animate","duration","onLoad","labels","datum","Date","Number","x","toLocaleDateString","_y0","y","toFixed","map","d","dia","obto_confirmado","confirmados","className","style","background","color","App","useQuery","getInformes","href","id","monitoramento","obto_descartado","obto_investigacao","recuperados","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAOeA,EALA,IAAIC,eAAa,CAC9BC,IAAK,yCACLC,MAAO,IAAIC,kB,gSCFN,IAAMC,EAAeC,cAAH,K,iUCSzB,IAAMC,EAAYC,IAAOC,IAAV,KA4DAC,EA3CD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAYf,OADAA,EAAOA,EAAKC,QAAQC,UAElB,eAACN,EAAD,WACE,eAAC,IAAD,CACEO,WAAY,CAAC,OAAQ,UACrBC,QAAS,CACPC,SAAU,KACVC,OAAQ,CAAED,SAAU,MAEtBE,OAAQ,YAAgB,IAAbC,EAAY,EAAZA,MACT,MAAM,GAAN,OAAU,IAAIC,KAAKC,OAAOF,EAAMG,IAAIC,mBAClC,SADF,gBAESJ,EAAMK,KAAOL,EAAMM,EAAI,MAAMC,QAAQ,GAF9C,OAPJ,UAYE,cAAC,IAAD,CACEf,KAAMA,EAAKgB,KAAI,SAACC,GAAD,MAAQ,CAAEN,EAAGM,EAAEC,IAAKJ,EAAGG,EAAEE,sBAE1C,cAAC,IAAD,CAAYnB,KAAMA,EAAKgB,KAAI,SAACC,GAAD,MAAQ,CAAEN,EAAGM,EAAEC,IAAKJ,EAAGG,EAAEG,qBAEtD,sBAAKC,UAAU,UAAf,UACE,qBAAKA,UAAU,MAAMC,MAAO,CAAEC,WAAY,SAAUC,MAAO,SAA3D,mBAGA,qBAAKH,UAAU,MAAMC,MAAO,CAAEC,WAAY,OAAQC,MAAO,SAAzD,2B,6aCvDR,IAAM5B,EAAYC,IAAOC,IAAV,KA6FA2B,MAhEf,WAA6B,IAAD,EAClBzB,EAAS0B,mBAAuBhC,EAAc,CACpDL,WADMW,KAIR,OACE,qBAAKqB,UAAU,MAAf,SACE,cAAC,iBAAD,CAAgBhC,OAAQA,EAAxB,SACE,eAAC,EAAD,YACO,OAAJW,QAAI,IAAJA,OAAA,EAAAA,EAAM2B,cAAe,cAAC,EAAD,CAAO3B,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAM2B,cAD3C,OAEG3B,QAFH,IAEGA,GAFH,UAEGA,EAAM2B,mBAFT,aAEG,EAAmBX,KAAI,SAACC,GAAO,IAE5BG,EASEH,EATFG,YACAQ,EAQEX,EARFW,KACAC,EAOEZ,EAPFY,GACAC,EAMEb,EANFa,cACAX,EAKEF,EALFE,gBACAY,EAIEd,EAJFc,gBACAC,EAGEf,EAHFe,kBACAC,EAEEhB,EAFFgB,YACAf,EACED,EADFC,IAGF,OACE,sBAAcG,UAAU,iBAAxB,UACE,6BAAK,IAAIZ,KAAKC,OAAOQ,IAAMN,mBAAmB,WAC9C,+BACE,+BACE,4CACCQ,KAEH,+BACE,8CACCU,KAEH,+BACE,uDACCX,KAEH,+BACE,sDACCY,KAEH,+BACE,6DACCC,KAEH,+BACE,4CACCC,KAEH,6BACE,mBAAGL,KAAMA,EAAT,6BA5BIC,cC/CTK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.81187054.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://congovid.herokuapp.com/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default client;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_INFORMES = gql`\r\n  query GetInformes {\r\n    getInformes {\r\n      id\r\n      confirmados\r\n      obto_descartado\r\n      recuperados\r\n      monitoramento\r\n      obto_investigacao\r\n      obto_confirmado\r\n      dia\r\n      href\r\n    }\r\n  }\r\n`;\r\n","import React, { useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  VictoryArea,\r\n  VictoryBar,\r\n  VictoryChart,\r\n  VictoryGroup,\r\n  VictoryLabel,\r\n  VictoryStack,\r\n} from \"victory\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  margin: 10px 0;\r\n\r\n  .legenda {\r\n    display: flex;\r\n    justify-content: center;\r\n    font-weight: 600;\r\n    margin-top: -30px;\r\n\r\n    .box {\r\n      padding: 10px;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Chart = ({ data }) => {\r\n  // const categories = Object.keys(data[0]).filter((el) => {\r\n  //   switch (el) {\r\n  //     case \"obto_confirmado\":\r\n  //     case \"confirmados\":\r\n  //       return true;\r\n  //     default:\r\n  //       return false;\r\n  //   }\r\n  // });\r\n\r\n  data = data.slice().reverse();\r\n  return (\r\n    <Container>\r\n      <VictoryStack\r\n        colorScale={[\"blue\", \"orange\"]}\r\n        animate={{\r\n          duration: 1200,\r\n          onLoad: { duration: 1000 },\r\n        }}\r\n        labels={({ datum }) => {\r\n          return `${new Date(Number(datum.x)).toLocaleDateString(\r\n            \"pt-BR\"\r\n          )} \\n ${(datum._y0 / (datum.y / 100)).toFixed(2)}% `;\r\n        }}\r\n      >\r\n        <VictoryBar\r\n          data={data.map((d) => ({ x: d.dia, y: d.obto_confirmado }))}\r\n        />\r\n        <VictoryBar data={data.map((d) => ({ x: d.dia, y: d.confirmados }))} />\r\n      </VictoryStack>\r\n      <div className=\"legenda\">\r\n        <div className=\"box\" style={{ background: \"orange\", color: \"black\" }}>\r\n          Casos\r\n        </div>\r\n        <div className=\"box\" style={{ background: \"blue\", color: \"white\" }}>\r\n          Mortes\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n//  {\r\n//    categories.map((c) => (\r\n//      <VictoryBar data={data.map((d) => ({ x: c, y: d.confirmados }))} />\r\n//    ));\r\n//  }\r\n//  {\r\n//    data.map((inf, i) => {\r\n//      console.log(inf);\r\n//      return (\r\n//        <VictoryBar\r\n//          data={[\r\n//            { x: \"Casos\", y: inf.confirmados },\r\n//            { x: \"Mortes\", y: inf.obto_confirmado },\r\n//            { x: \"Monitoramento\", y: inf.monitoramento },\r\n//          ]}\r\n//        />\r\n//      );\r\n//    });\r\n//  }\r\n","import React from \"react\";\nimport { ApolloProvider, useQuery } from \"@apollo/client\";\nimport client from \"./apollo\";\nimport { InformesType } from \"./apollo/types\";\nimport { GET_INFORMES } from \"./apollo/queries/InformeQueries\";\nimport styled from \"styled-components\";\nimport Chart from \"./components/chart/Chart\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  flex-wrap: wrap;\n  overflow-x: hidden;\n\n  div.single-informe {\n    margin: 10px 20px;\n\n    ul {\n      padding: 0;\n      list-style: none;\n\n      b {\n        margin-right: 10px;\n      }\n    }\n  }\n\n  g {\n    text {\n      tspan {\n        font-size: 6px !important;\n      }\n    }\n  }\n`;\n\nfunction App(): JSX.Element {\n  const { data } = useQuery<InformesType>(GET_INFORMES, {\n    client,\n  });\n\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Container>\n          {data?.getInformes && <Chart data={data?.getInformes} />}\n          {data?.getInformes?.map((d) => {\n            const {\n              confirmados,\n              href,\n              id,\n              monitoramento,\n              obto_confirmado,\n              obto_descartado,\n              obto_investigacao,\n              recuperados,\n              dia,\n            } = d;\n\n            return (\n              <div key={id} className=\"single-informe\">\n                <h3>{new Date(Number(dia)).toLocaleDateString(\"pt-BR\")}</h3>\n                <ul>\n                  <li>\n                    <b>Confirmados</b>\n                    {confirmados}\n                  </li>\n                  <li>\n                    <b>Monitoramento</b>\n                    {monitoramento}\n                  </li>\n                  <li>\n                    <b>Óbitos confirmados </b>\n                    {obto_confirmado}\n                  </li>\n                  <li>\n                    <b>Óbitos descartados</b>\n                    {obto_descartado}\n                  </li>\n                  <li>\n                    <b>Óbitos investigação</b>\n                    {obto_investigacao}\n                  </li>\n                  <li>\n                    <b>Recuperados</b>\n                    {recuperados}\n                  </li>\n                  <li>\n                    <a href={href}>Link pdf</a>\n                  </li>\n                </ul>\n              </div>\n            );\n          })}\n        </Container>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}